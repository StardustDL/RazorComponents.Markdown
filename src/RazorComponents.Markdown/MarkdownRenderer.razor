@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IMarkdownComponentService Service
@inject ILogger<MarkdownRenderer> Logger

<article @ref="markdownContent" class="@Class" style="@Style">
    @((MarkupString)Html)
</article>

@code {
    [Parameter]
    public string Value { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public TimeSpan? RenderInterval { get; set; } = null;

    private string Html { get; set; } = "";

    private string? OldValue { get; set; } = null;

    private DateTimeOffset? LastRender { get; set; } = null;

    private bool ScheduledRender { get; set; } = false;

    private string BaseUrl { get; set; } = "";

    private ElementReference markdownContent;

    protected override void OnInitialized()
    {
        BaseUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var ind = BaseUrl.IndexOf('#');
        if (ind >= 0)
            BaseUrl = BaseUrl.Remove(ind);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (LastRender is null) // Havn't rendered
        {
            await Rerender();
        }
        else if (Value != OldValue) // Only render when changed
        {
            if (RenderInterval is null) // No delay rendering
            {
                await Rerender();
            }
            else
            {
                var interval = DateTimeOffset.Now - LastRender.Value;
                if (interval >= RenderInterval.Value) // Exceed the interval after last rendering
                {
                    await Rerender();
                }
                else if (!ScheduledRender) // Havn't schedule rendering
                {
                    ScheduledRender = true;
                    _ = Task.Delay(RenderInterval.Value - interval).ContinueWith(async _ =>
                    {
                        if (RenderInterval is null || DateTimeOffset.Now - LastRender.Value >= RenderInterval.Value)
                        {
                            await Rerender();
                        }
                        ScheduledRender = false;
                    });
                }
            }
        }
        await base.OnParametersSetAsync();
    }

    public async Task Rerender()
    {
        // Logger.LogInformation("Rendering.");
        OldValue = Value;
        LastRender = DateTimeOffset.Now;
        Html = await Service.RenderHtml(OldValue);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Service.EnableCodeHighlight)
        {
            await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.highlight", markdownContent);
        }
        if (Service.EnableMathematics)
        {
            await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.math", markdownContent);
        }
        if (Service.EnableDiagrams)
        {
            await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.diagram", markdownContent);
        }
        await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.fixAnchor", markdownContent, BaseUrl);
    }
}
